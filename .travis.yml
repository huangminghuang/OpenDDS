## "sudo: true" environment is much slower than the "sudo: false" environment even though it provides larger memory.
sudo: false
dist: trusty
language: cpp

cache: pip
before_install:
  - git clone -b cmake --depth 1 git://github.com/huangminghuang/ACE_TAO.git
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      mkdir $HOME/usr;
      export PATH="$HOME/usr/bin:$PATH";
      wget --no-check-certificate https://cmake.org/files/v3.8/cmake-3.8.2-Linux-x86_64.sh;
      bash ./cmake-3.8.2-Linux-x86_64.sh --prefix=$HOME/usr --exclude-subdir --skip-license;
    fi
  - pip install --user awscli

branches:
  only:
    - cmake

before_script:
  - export
  - if [ "$FUZZ" == "1" ]; then
        tar czf modeling_plugins.tar.gz tools/modeling/plugins;
        rm -rf tools/modeling/plugins tools/IntermediateTypeLang/cpp/rapidjson;
        perl tools/scripts/dds_fuzz.pl;
        tar xzf modeling_plugins.tar.gz;
        rm modeling_plugins.tar.gz;
    fi
  - if [ "$MATRIX_NAME" == "NoInline" ]; then BUILD_FLAGS="$BUILD_FLAGS -DACE_INLINE=OFF"; fi
  - if [ "$MATRIX_NAME" == "Static" ]; then BUILD_FLAGS="$BUILD_FLAGS -DBUILD_SHARED_LIBS=OFF"; fi
  - if [ "$DEBUG" == "0" ]; then
      BUILD_FLAGS="$BUILD_FLAGS -DCMAKE_BUILD_TYPE=RELEASE";
    else
      BUILD_FLAGS="$BUILD_FLAGS -DCMAKE_BUILD_TYPE=DEBUG";
    fi
  - if [ "$MATRIX_NAME" == "WChar" ]; then BUILD_FLAGS="$BUILD_FLAGS -DACE_USES_WCHAR=ON"; fi
  - if [ "$MATRIX_NAME" == "NoBit" ]; then DDS_BUILD_FLAGS="$DDS_BUILD_FLAGS -DOPENDDS_HAS_BUILT_IN_TOPICS=OFF"; fi
  - if [ "$MATRIX_NAME" == "NoMultiTopic" ]; then DDS_BUILD_FLAGS="$DDS_BUILD_FLAGS -DOPENDDS_HAS_MULTI_TOPIC=OFF"; fi
  - if [ "$JAVA" == "0" ]; then DDS_BUILD_FLAGS="$DDS_BUILD_FLAGS -DCMAKE_DISABLE_FIND_PACKAGE_JAVA=TRUE"; fi
  - if [ "$MATRIX_NAME" == "SafetyBase" ]; then
         DDS_BUILD_FLAGS="$DDS_BUILD_FLAGS -DOPENDDS_SAFETY_PROFILE=BASE -DACE_FACE_DEV=ON";
    fi
  - if [ "$MATRIX_NAME" == "Android" ]; then
      BUILD_FLAGS="$BUILD_FLAGS -DCMAKE_SYSTEM_NAME=Android -DCMAKE_SYSTEM_VERSION=21 -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY";
    fi
  - if [ -z "$COMPILER" ]; then
      COMPILER=g++-7;
    fi
  ## we need to disable ccahe explicitly because it is installed in the travis ci environment but the environment
  ## does not have enough disk space or network bandwidth to cache all OpenDDS object code
  - export BUILD_FLAGS="$BUILD_FLAGS -DCCACHE=OFF -DACE_UNITY_BUILD=ON"
  - export DDS_BUILD_FLAGS="$DDS_BUILD_FLAGS -DACE_TAO_SOURCE_DIR=$TRAVIS_BUILD_DIR/ACE_TAO $BUILD_FLAGS"

jobs:
  _build-staging: &build-staging
    stage: build
    addons: &gcc7-addons
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - libxerces-c-dev
          - ninja-build
          - g++-7

    script:
      - CXX=$COMPILER cmake -GNinja -H. -Bbuild $DDS_BUILD_FLAGS
      - cmake --build build -- -j 4
    after_success:
      - tar --exclude='*.o' -czf build.tar.gz build
      - aws s3 cp build.tar.gz s3://com.ociweb.opendds/$TRAVIS_BRANCH/$MATRIX_NAME/build.tar.gz

  _test-staging: &test-staging
    stage: test
    addons: *gcc7-addons
    script:
      - aws s3 cp s3://com.ociweb.opendds/$TRAVIS_BRANCH/$MATRIX_NAME/build.tar.gz .
      - tar zxf build.tar.gz
      - cd build && ctest -j 6 --test-timeout 240
    after_script:
      - export TRAVIS_BUILD_JOB_DIR=${TRAVIS_JOB_NUMBER/./\/}
      - $TRAVIS_BUILD_DIR/ctestlog2json.py --generated_url_prefix=http://com.ociweb.opendds.s3-website-us-east-1.amazonaws.com/tests/${TTRAVIS_BUILD_JOB_DIR}
                                           --output_dir=travis_tests/${TRAVIS_BUILD_JOB_DIR}
      - aws s3 sync --quiet travis_tests/${TRAVIS_BUILD_NUMBER} s3://com.ociweb.opendds/tests/${TRAVIS_BUILD_NUMBER}
      - aws s3 sync --quiet s3://com.ociweb.opendds/tests/${TRAVIS_BUILD_NUMBER} travis_tests/${TRAVIS_BUILD_NUMBER} --exclude "*.txt"
      - export NUM_TEST_STAGES=`grep '*test-staging' $TRAVIS_BUILD_DIR/.travis.yml | wc -l`
      - export NUM_TESTS_JSON_FILES=`find travis_tests/${TRAVIS_BUILD_NUMBER} -name "tests.json" | wc -l`

      - if [ $NUM_TEST_STAGES == ${NUM_TESTS_JSON_FILES} ]; then
          text=`echo "["; find travis_tests/${TRAVIS_BUILD_NUMBER} -name "tests.json" -exec cat {} \; | paste -sd "," - ; echo "]"`;
          echo $text > travis_tests/${TRAVIS_BUILD_NUMBER}/report.json;
          aws s3 cp --quiet travis_tests/${TRAVIS_BUILD_NUMBER}/report.json s3://com.ociweb.opendds/tests/${TRAVIS_BUILD_NUMBER}/report.json;
        fi

  _clang-Env: &clang-Env
    addons:
      apt:
         sources:
           - llvm-toolchain-trusty-3.9
         packages:
           - libxerces-c-dev
           - ninja-build
           - clang++-3.9
    env: "MATRIX_NAME=Clang COMPILER=clang++-3.9"
  _android-Env: &android-Env
    env: "MATRIX_NAME=Android"
    install:
      - export ANDROID_NDK=$HOME/usr/android-ndk
      - git clone -b strip --depth=1 git://github.com/urho3d/android-ndk.git $ANDROID_NDK

  _macOS-Env: &macos-Env
    os: osx
    osx_image: xcode9
    install:
      - brew install ninja awscli
    env: "MATRIX_NAME=MacOS COMPILER=c++"

  include:
    ## Build stages are sorted on the build times to minimize the total completion time
    - <<: *build-staging
      <<: *macos-Env
    - <<: *build-staging
      env: &Release-Env "MATRIX_NAME=Release DEBUG=0"
    - <<: *build-staging
      env: &Debug-Env "MATRIX_NAME=Debug DEBUG=1"
    - <<: *build-staging
      ## static debug build would cause out of disk space error on travis ci
      env: &Static-Env "MATRIX_NAME=Static DEBUG=0"
    - <<: *build-staging
      <<: *android-Env
    - <<: *build-staging
      env: &NoInline-Env "MATRIX_NAME=NoInline DEBUG=1"
    - <<: *build-staging
      env: &NoBit-Env "MATRIX_NAME=NoBit"
    - <<: *build-staging
      env: &NoMultiTopic-Env "MATRIX_NAME=NoMultiTopic"
    - <<: *build-staging
      env: &WChar-Env "MATRIX_NAME=WChar"
    - <<: *build-staging
      <<: *clang-Env
    - <<: *build-staging
      env: &SafetyBase-Env "MATRIX_NAME=SafetyBase"

    - <<: *test-staging
      env: *Release-Env
    - <<: *test-staging
      env: *Debug-Env
    - <<: *test-staging
      env: *NoInline-Env
    - <<: *test-staging
      env: *NoBit-Env
    - <<: *test-staging
      env: *Static-Env
    - <<: *test-staging
      env: *SafetyBase-Env
    - <<: *test-staging
      env: *WChar-Env
    - <<: *test-staging
      <<: *clang-Env