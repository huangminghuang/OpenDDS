sudo: false
language: cpp
cache: ccache

env:
  matrix:
    - NO_INLINE=1
    - NO_BIT=1
    - NO_DEBUG=1
    - STATIC=1 NO_DEBUG=1
#    - SAFETY_PROFILE=1
    - USES_WCHAR=1
  global:
    - COMPILER=g++-6

matrix:
  include:
    - compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - libxerces-c-dev
            - g++-6
            - ninja-build
    - compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.9
          packages:
            - libxerces-c-dev
            - clang++-3.9
      env: COMPILER=clang++-3.9
    - os: osx
      osx_image: xcode8.3
      env: COMPILER=c++
      install:
        - brew install ccache ninja
        - PATH=$PATH:/usr/local/opt/ccache/libexec

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - libxerces-c-dev
      - g++-6
      - ninja-build

before_install:
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      mkdir $HOME/usr;
      export PATH="$HOME/usr/bin:$PATH";
      wget --no-check-certificate https://cmake.org/files/v3.7/cmake-3.7.2-Linux-x86_64.sh;
      chmod +x cmake-3.7.2-Linux-x86_64.sh;
      ./cmake-3.7.2-Linux-x86_64.sh --prefix=$HOME/usr --exclude-subdir --skip-license ;
    fi

branches:
  only:
    - cmake

before_script:
  - export
  - if [ "$FUZZ" == "1" ]; then
        tar czf modeling_plugins.tar.gz tools/modeling/plugins;
        rm -rf tools/modeling/plugins tools/IntermediateTypeLang/cpp/rapidjson;
        perl $DDS_ROOT/tools/scripts/dds_fuzz.pl;
        tar xzf modeling_plugins.tar.gz;
        rm modeling_plugins.tar.gz;
    fi
  - if [ "$NO_INLINE" == "1" ]; then DDS_BUILD_FLAGS="$DDS_BUILD_FLAGS -DACE_INLINE=OFF"; fi
  - if [ "$NO_BIT" == "1" ]; then DDS_BUILD_FLAGS="$DDS_BUILD_FLAGS -DOPENDDS_HAS_BUILT_IN_TOPICS=OFF"; fi
  - if [ "$STATIC" == "1" ]; then DDS_BUILD_FLAGS="$DDS_BUILD_FLAGS -DBUILD_SHARED_LIBS=OFF"; fi
  - if [ "$NO_DEBUG" == "1" ]; then DDS_BUILD_FLAGS="$DDS_BUILD_FLAGS -DCMAKE_BUILD_TYPE=RELEASE"; else DDS_BUILD_FLAGS="$DDS_BUILD_FLAGS -DCMAKE_BUILD_TYPE=DEBUG"; fi
  - if [ "$SAFETY_PROFILE" == "1" ]; then DDS_BUILD_FLAGS="$DDS_BUILD_FLAGS -DOPENDDS_SAFETY_PROFILE=BASE"; fi
  - if [ "$USES_WCHAR" == "1" ]; then DDS_BUILD_FLAGS="$DDS_BUILD_FLAGS -DACE_USES_WCHAR=ON"; fi


script:
  - export CXX=$COMPILER
  - mkdir build
  - cd build
  - echo DDS_BUILD_FLAGS=$DDS_BUILD_FLAGS
  - cmake -GNinja $DDS_BUILD_FLAGS .. && ninja && ctest --output-on-failure -j 8
